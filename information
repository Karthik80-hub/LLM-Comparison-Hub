LLM-Compare-Hub Project File Structure and Use Cases
====================================================

Core Application Files
---------------------

app.py
- Use Case: Main Gradio web interface and application entry point.
- Function: Orchestrates the UI, handles user input (including model selection), and manages the data flow between all other modules.

universal_model_wrapper.py
- Use Case: The new, central engine for all LLM interactions.
- Function: Contains the complete logic for handling API calls to GPT-4, Claude 3, and Gemini 1.5. It also includes self-contained functions for real-time prompt detection and Google search fallback. It intelligently determines whether a prompt is for a general query or an ATS evaluation.
- Status: This is the core logic hub of the application.

response_generator.py
- Use Case: A lean interface between the UI (`app.py`) and the model logic.
- Function: Takes requests from the UI and passes them to the `universal_model_wrapper.py`. It then returns the formatted responses back to the UI.
- Status: Simplified to be a clean pass-through, improving modularity.

round_robin_evaluator.py
- Use Case: Dynamic, comprehensive model evaluation system.
- Function: Each *selected* model evaluates its peers. The evaluation logic is now fully dynamic and adapts based on which models are selected in the UI, preventing crashes.
- Status: The core evaluation engine.

llm_prompt_eval_analysis.py
- Use Case: Data analysis and visualization.
- Function: Analyzes evaluation results and generates consistently styled, professional charts and reports.
- Status: Standalone analysis tool + used by the Gradio app.

llm_response_logger.py
- Use Case: Quick testing and logging tool for developers.
- Function: Allows for rapid testing of models with single or batch prompts.
- Status: Standalone testing tool.

Supporting Modules
-----------------

search_fallback.py
- Use Case: Provides Google search functionality.
- Status: Although the primary search logic has been moved into `universal_model_wrapper.py` for robustness, this file is kept in the project for reference or potential future use. It is not actively called by the main application flow.

Configuration & Documentation
----------------------------

requirements.txt
- Use Case: Python dependencies.
- Function: Lists all required packages for the project to run.

.env
- Use Case: API key configuration.
- Function: Securely stores all necessary API keys.

.gitignore
- Use Case: Git version control.
- Function: Excludes sensitive files and unnecessary directories from the repository.

README.md
- Use Case: Main project documentation.
- Function: Provides setup instructions, usage guides, and an overview of the architecture.

Testing & Development
--------------------

test_standalone_tools.py
- Use Case: Testing and demonstration.
- Function: Shows how to use the standalone modules.
- Status: Development/testing tool.

Project Summary
==============

The project has been refactored into a more robust, modular architecture with the `universal_model_wrapper.py` at its core. This new structure centralizes the most complex logic, making the application easier to maintain and less prone to errors. The evaluation system is now fully dynamic, adapting to the user's model selection in the UI.

Key Features:
- **Dynamic Model Selection**: Choose any combination of models to run.
- **Robust Round-Robin Evaluation**: The evaluation system adapts to your model selection.
- **Centralized Logic**: The `universal_model_wrapper.py` handles all core model interactions.
- **Consistent Visualizations**: All charts are now generated with the same professional styling.
- **Self-Contained Search**: Real-time detection and search are handled within the core wrapper.
- **Clean and Maintainable**: The architecture is simplified and easier to understand.

